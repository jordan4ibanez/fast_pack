 /**
     * Internal point based tree packing algorithm
     */
    private bool treePack(T key) {

        /// Grab the AABB out of the internal dictionary
        Rect AABB = this.collisionBoxes[key];

        /// Start the score at the max value possible for reduction formula
        uint score = uint.max;

        bool found = false;

        /// Cache padding
        uint padding = this.config.padding;

        /// Cache widths
        uint maxX = this.config.width;
        uint maxY = this.config.height;

        uint bestX = uint.max;
        uint bestY = uint.max;

        /// Cached fail state
        bool failed = false;

        /// Cached keys
        T[] keyArray = this.collisionBoxes.keys();
        /// Cached collisionboxes
        Rect[] otherCollisionBoxes;

        { // Scope it out of existence

            for (int i = 0; i < keyArray.length; i++) {
                T gottenKey = keyArray[i];
                if (gottenKey != key) {
                    otherCollisionBoxes ~= this.collisionBoxes[gottenKey];
                }
            }
        }


        long pickedSlot = 0;

        /// Iterate all available positions
        for (int u = 0; u < this.freeSlots.length; u++) {

            FreeSlot slot = this.freeSlots[u];

            failed = false;

            AABB.x = slot.x;
            AABB.y = slot.y;

            /// In bounds check
            if (// Outer
                AABB.x + AABB.width + padding < maxX &&
                AABB.y + AABB.height + padding < maxY &&
                /// Inner
                AABB.x >= padding &&
                AABB.y >= padding) {

                /// Collided with other box failure
                /// Index each collision box to check if within
                
                for (int i = 0; i < otherCollisionBoxes.length; i++) {
                    Rect otherAABB = otherCollisionBoxes[i];
                    if (AABB.collides(otherAABB, padding)) {
                        failed = true;
                        break;
                    }
                }

                /// If it successfully found a new position, update the best X and Y
                if (!failed) {
                    uint newScore = calculateManhattan(AABB.x, AABB.y, 0, 0);
                    // uint newScore = AABB.y - goalY;
                    if (newScore <= score) {
                        pickedSlot = u;
                        found = true;
                        score = newScore;
                        bestX = AABB.x;
                        bestY = AABB.y;
                    }
                }
            }
        }

        if (!found) {
            if (this.config.autoResize) {
                return false;
            } else {
                throw new Exception("Not enough room for texture! Make the packer canvas bigger!");
            }
        }

        /// Found it, remove this free slot
        this.freeSlots = this.freeSlots.remove(pickedSlot);

        /// Add in other free slots around it
        this.freeSlots ~= FreeSlot(bestX + AABB.width + padding, bestY);
        this.freeSlots ~= FreeSlot(bestX, bestY + AABB.height + padding);

        AABB.x = bestX;
        AABB.y = bestY;

        // Set the collisionbox back into the internal dictionary
        this.collisionBoxes[key] = AABB;

        // Finally clean out points
        for (uint i = 0; i < keyArray.length; i++) {
            T gottenKey = keyArray[i];
            Rect gottenCollisionBox = this.collisionBoxes[gottenKey];


            long[] removals;
            for (uint w = 0; w < this.freeSlots.length; w++) {
                FreeSlot thisFreeSlot = this.freeSlots[w];
                if (gottenCollisionBox.containsPoint(thisFreeSlot.x, thisFreeSlot.y)) {
                    removals ~= w;
                }
            }

            long shift = 0;
            for (long q = 0; q < removals.length; q++) {
                this.freeSlots.remove(removals[q] + shift);

                shift--;
            }

        }

        return true;
    }